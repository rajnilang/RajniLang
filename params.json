{"name":"Rajnilang","tagline":"","body":"#######################################################################################\r\n\r\nTo start with C version of Rajni-lang follow the steps below\r\n\r\n1.To use the interactive repl go to the directory if cloned\r\n\r\n    Type ./rajni\r\n\r\nor\r\n\r\nTo execute a file written in Rajnilang use\r\n\r\n    ./rajni <file_name>\r\n\r\n2.If you want to build Rajnilang from source\r\n\r\n    cc -std=c99 -Wall rajni.c mpc.c -ledit -lm -o rajni\r\n\r\nThen follow step1.\r\n\r\n####################################################################################\r\nRajnilang is a dynamic language along the lines of javascript\r\n\r\nEverything in Rajnilang is an object\r\n\r\nGetting started \r\n\r\nWelcome to the RajniLang wiki!\r\n\r\nThis is a step by step tutorial on getting started with RajniLang\r\n\r\nEverything in rajnilang is an object and can be stored in a variable just like javascript.\r\nTo set a variable use the following syntax\r\n\r\n    style {l} 23\r\n\r\nThis will create a variable named l with value 23. We can similarly set string or function as a value.\r\n\r\nMultiple assignments can be done as below\r\n\r\n    style {l m} 23 24\r\n\r\nwhich is equivalent to : \"l=23 , m=24\"\r\n\r\nThis will set l to the value 23 and m to the value 24\r\n\r\n**Arithmetic operations**\r\n\r\n    lagalaga l 40\r\n\r\nwhich is equivalent to \r\n\r\nl=40\r\n\r\nThis will set the value 40 to l if doesn't exist it creates a new variable l and sets it.\r\n\r\n    kooti_kalichu_paru_sariya_varum_+ 2 3\r\n\r\nwhich is equivalent to\r\n\r\n2+3\r\n\r\n    kooti_kalichu_paru_sariya_varum_- 2 3\r\n\r\nwhich is equivalent to\r\n\r\n2-3\r\n\r\n    \"sathigam\" which is equivalent to multiplication\r\n\r\n    \"prachodhagam\" which is equivalent to division\r\n\r\n    \"bayalagam\" which is equivalent to percentage\r\n\r\n**Conditional statements**\r\n\r\n    yen_vazhi_thani_vazhi(lagalagalagalaga 2 3) { andavan_solran_arunachalam_mudikran \"true\"} {    ena_pathi_uanku_theriyadhu \"false\" }\r\n\r\nwhich is equivalent to\r\n if(2==3)\r\n{ \r\nconsole.log(\"true\") \r\n} \r\nelse\r\n{ \r\nconsole.error(\"false\") \r\n} \r\n\r\nLogical operations\r\n\r\n    anbuna_enanu_theriyuma 0 1\r\n\r\nwhich is equivalent to 0 && 1\r\n\r\n    aarupadaiyappa 0 1\r\n\r\nwhich is equivalent to 0 || 1\r\n\r\n**Comparision operations**\r\n\r\n    adhigama_asai_padra_ambalayum 2 3\r\n\r\nwhich is equivalent to 2 > 3\r\n\r\n    kamiya_kovapadadha_pombalayum 2 3\r\n\r\nwhich is equivalent to 2 < 3\r\n\r\n**Basic print statement**\r\n\r\n    andavan_solran_arunachalam_mudikran \"Hello world\"\r\n\r\nconsole.log(\"Hello world\")\r\n\r\n    ena_pathi_unaku_theriyadhu \"Not found\"\r\n\r\nconsole.error(\"Not found\")\r\n\r\n**Special feature**\r\n\r\n    oru_thadava_sonna_noru_thadava_sona_madiri \"Baasha\"\r\n\r\nwhich is equivalent to \"Baasha\" 100 times\r\n\r\n**Functions**\r\n\r\nRajnilang has global and local scopes similar to javascript. It does not have the concept of classes and is a purely functional language.\r\n\r\n    style {l} (elam_maye {x y} {andavan_solran_arunachalam_mudikran (kooti_kalichu_paru_sariya_varum_+ 2 3)})\r\n\r\nwhich is equivalent to \r\n\r\nl = function(x,y)\r\n{\r\n    console.log(x+y);\r\n}\r\n\r\nTo invoke this method use l 2 3 this will print 5 \r\n\r\n**Examples which explain recursion**\r\n\r\n    style {muthu} ( elam_maye {x y} { yen_vazhi_thani_vazhi (aarupadaiyappa (adhigama_asai_padra_ambalayum x y) (lagalagalagalaga x y) ) { andavan_solran_arunachalam_mudikran \"true\"} { muthu 1 1} })\r\n\r\nmuthu 0 1 to run this program\r\n\r\nvar muthu = function(x,y)\r\n{\r\n\tif((x>y)||(x==y))\r\n\t{\r\n\t\tconsole.log(\"true\")\r\n\t}\r\n\telse\r\n\t{\r\n\t\tmuthu(1,1);\t\t\t\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-50432794-1","note":"Don't delete this file! It's used internally to help with page regeneration."}